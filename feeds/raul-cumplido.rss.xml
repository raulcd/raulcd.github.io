<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ra√∫l Cumplido</title><link>http://raulcd.com/</link><description></description><atom:link href="None/feeds/raul-cumplido.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 17 Mar 2015 11:30:00 +0100</lastBuildDate><item><title>How Python caches compiled bytecode.</title><link>http://raulcd.com/how-python-caches-compiled-bytecode.html</link><description>&lt;p&gt;While reading an email at the Python developers mailing list about PEP-488 (which is not yet approved and is under discussion) I wondered how bytecode files works in Python.&lt;/p&gt;
&lt;p&gt;The purpose of this post is to take some notes for myself and share what I find.&lt;/p&gt;
&lt;h2&gt;PEP-3147&lt;/h2&gt;
&lt;p&gt;While I was reading the proposed PEP-488 (which will be explained later) there was several references to &lt;a href="https://www.python.org/dev/peps/pep-3147"&gt;PEP-3147&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before PEP-3147 was implemented, files were saved with the format &lt;code&gt;'{filename}.pyc'&lt;/code&gt; (or .pyo) in the same directory where the source code was stored.&lt;/p&gt;
&lt;p&gt;PEP-3147 was created as an extension to the Python import mechanism in order to improve sharing of compiled Python bytecode for different distributions with the sourcecode.&lt;/p&gt;
&lt;p&gt;CPython compiles its source code into &lt;code&gt;bytecode&lt;/code&gt;. For performance reasons Python doesn't recompile every time, so it caches the content of the compiled code. Python only recompiles when it realizes the source code file has changed. Python stores in the cached compiled file two 32bit big-endian digits which represents a &lt;strong&gt;&lt;em&gt;magic number&lt;/em&gt;&lt;/strong&gt; and a timestamp. The magic number changes every time the Python distribution changes the bytecode (for example adding new bytecode instructions to the virtual machine). This prevents causing problems when trying to execute compiled code for different virtual machines.&lt;/p&gt;
&lt;p&gt;As some distributions have different versions of Python installed and users can install their different versions the previous mechanism doesn't allow to reuse the compiled files.&lt;/p&gt;
&lt;p&gt;PEP-3147 extended this by creating on every package a &lt;code&gt;__pycache__&lt;/code&gt; directory which can contain different versions of the compiled files. The format of the names is now &lt;code&gt;{filename}.{tag}.pyc&lt;/code&gt;. The tag can be seen on the &lt;code&gt;imp module&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_tag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;cpython-34&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The magic number used on the pyc files can also be found on this module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_magic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xee\x0c\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As expected when using another version of Python the magic numbers change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.5&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;a0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;c0d25de5919e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jan&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;Compatible&lt;/span&gt; &lt;span class="n"&gt;Apple&lt;/span&gt; &lt;span class="n"&gt;LLVM&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clang&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;600.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;darwin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_tag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;cpython-35&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_magic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xf8\x0c\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PEP-3147 was introduced on python 3.2 if we try with Python 2.7.9 we can verify that &lt;code&gt;get_magic()&lt;/code&gt; exists but not &lt;code&gt;get_tag()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;2.7&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;7.9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;648&lt;/span&gt;&lt;span class="n"&gt;dcafa7e5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dec&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Apple&lt;/span&gt; &lt;span class="n"&gt;Inc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="mi"&gt;5666&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;darwin&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_magic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x03\xf3\r\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_tag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;get_tag&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is why if we use Python2 we still see the &lt;code&gt;.pyc&lt;/code&gt; or &lt;code&gt;.pyo&lt;/code&gt; files amongst with our code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;|-- __init__.py&lt;/span&gt;
&lt;span class="go"&gt;|-- __init__.pyc&lt;/span&gt;
&lt;span class="go"&gt;|-- api.py&lt;/span&gt;
&lt;span class="go"&gt;|-- api.pyc&lt;/span&gt;
&lt;span class="go"&gt;|-- module&lt;/span&gt;
&lt;span class="go"&gt;|   |-- __init__.py&lt;/span&gt;
&lt;span class="go"&gt;|   |-- __init__.pyc&lt;/span&gt;
&lt;span class="go"&gt;|   |-- raul.py&lt;/span&gt;
&lt;span class="go"&gt;|   |-- raul.pyc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the PEP has been implemented we can see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;|-- meteora&lt;/span&gt;
&lt;span class="go"&gt;|   |-- __init__.py&lt;/span&gt;
&lt;span class="go"&gt;|   |-- __pycache__&lt;/span&gt;
&lt;span class="go"&gt;|   |   |-- __init__.cpython-35.pyc&lt;/span&gt;
&lt;span class="go"&gt;|   |   |-- __init__.cpython-34.pyc&lt;/span&gt;
&lt;span class="go"&gt;|   |   |-- utils.cpython-35.pyc&lt;/span&gt;
&lt;span class="go"&gt;|   |   `-- utils.cpython-34.pyc&lt;/span&gt;
&lt;span class="go"&gt;|   `-- utils.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;To recompile or not to recompile&lt;/h2&gt;
&lt;p&gt;The next diagram has been extracted directly from the PEP-3147 which explains clearly what is the workflow to load/compile the bytecode when importing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="PEP 3147 Workflow" src="http://raulcd.com/images/pep-3147-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;As previously explained the &lt;code&gt;pyc&lt;/code&gt; file matches when both the magic number and the timestamp of the source file matches exactly in the compiled file.&lt;/p&gt;
&lt;p&gt;When Python is asked to &lt;code&gt;import foo&lt;/code&gt; it searches on &lt;code&gt;sys.path&lt;/code&gt; if the file exists. If it is not found it checks whether there is a &lt;code&gt;foo.pyc&lt;/code&gt; file. In case the &lt;code&gt;foo.pyc&lt;/code&gt; file exists it will load it. Otherwise it will raise an ImportError.&lt;/p&gt;
&lt;p&gt;If the file &lt;code&gt;foo.py&lt;/code&gt; exists Python will check if there is a &lt;code&gt;__pycache__/foo.{magic}.pyc&lt;/code&gt; file that matches the source file. In the case of match it will load it.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;__pycache__/foo.{magic}.pyc&lt;/code&gt; doesn't exist or doesn't match (timestamp changed) it checks whether the &lt;code&gt;__pycache__&lt;/code&gt; directory has been created or not, and if it's not created it creates it.&lt;/p&gt;
&lt;p&gt;Finally it compiles the &lt;code&gt;foo.py&lt;/code&gt; file and it generates the &lt;code&gt;__pycache__/foo.{magic}.pyc&lt;/code&gt; file. &lt;/p&gt;
&lt;h2&gt;PEP-488&lt;/h2&gt;
&lt;p&gt;The purpose of the (not yet approved) PEP is to remove the PYO files which are Python Bytecode Optimized files.&lt;/p&gt;
&lt;h3&gt;Current behaviour:&lt;/h3&gt;
&lt;p&gt;Currently bytecode files can be PYC and PYO. A PYC file is a bytecode file when no optimization level has been applied on startup.
PYO files are files that are generated when optimization has been specified (&lt;code&gt;-O&lt;/code&gt; or &lt;code&gt;-OO&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In order to test the different levels of optimizations I've created the next simple test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;|-- api&lt;/span&gt;
&lt;span class="go"&gt;    |-- __init__.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My &lt;code&gt;__init__.py&lt;/code&gt; file consists of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This is my test function&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we execute python without any optimization we can see that the docstring of our function is there and the assertion fails as it's executed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;raulcd@test  $ python3&lt;/span&gt;
&lt;span class="go"&gt;Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22)&lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; import api
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; api.test.__doc__
&lt;span class="go"&gt;&amp;#39;\n    This is my test function\n    &amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; api.test&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;  File &amp;quot;/Users/raulcd/test/api/__init__.py&amp;quot;, line 5, in test&lt;/span&gt;
&lt;span class="go"&gt;    assert False == True&lt;/span&gt;
&lt;span class="go"&gt;AssertionError&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also verify that the compiled bytecode is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;`-- api&lt;/span&gt;
&lt;span class="go"&gt;    |-- __init__.py&lt;/span&gt;
&lt;span class="go"&gt;    `-- __pycache__&lt;/span&gt;
&lt;span class="go"&gt;        `-- __init__.cpython-34.pyc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we execute with &lt;code&gt;-O&lt;/code&gt; we can see that assertion doesn't fail as this optimization removes the assertions from our code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;raulcd@test  $ python3 -O&lt;/span&gt;
&lt;span class="go"&gt;Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22)&lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; import api
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; api.test.__doc__
&lt;span class="go"&gt;&amp;#39;\n    This is my test function\n    &amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; api.test&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also see that the compiled file generated is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;`-- api&lt;/span&gt;
&lt;span class="go"&gt;    |-- __init__.py&lt;/span&gt;
&lt;span class="go"&gt;    `-- __pycache__&lt;/span&gt;
&lt;span class="go"&gt;        |-- __init__.cpython-34.pyc&lt;/span&gt;
&lt;span class="go"&gt;        `-- __init__.cpython-34.pyo&lt;/span&gt;

&lt;span class="go"&gt;2 directories, 3 files&lt;/span&gt;
&lt;span class="go"&gt;raulcd@test  $ ls -lrt api/__pycache__/&lt;/span&gt;
&lt;span class="go"&gt;total 16&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1 raulcd  staff  280 Mar 17 11:19 __init__.cpython-34.pyc&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1 raulcd  staff  247 Mar 17 11:23 __init__.cpython-34.pyo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we execute Python with &lt;code&gt;-OO&lt;/code&gt; we can see that both the assertion and the docstring have disappeared. Note that I need to manually remove the &lt;code&gt;.pyo&lt;/code&gt; file as Python import mechanism will not recompile (as per the workflow explained before, file has not changed and already exists the &lt;code&gt;.pyo&lt;/code&gt; file):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;raulcd@test  $ rm api/__pycache__/__init__.cpython-34.pyo&lt;/span&gt;
&lt;span class="go"&gt;raulcd@test  $ python3 -OO&lt;/span&gt;
&lt;span class="go"&gt;Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  5 2014, 20:42:22)&lt;/span&gt;
&lt;span class="go"&gt;[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; import api
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; api.test.__doc__
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt; api.test&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The generated &lt;code&gt;.pyo&lt;/code&gt; file has the same name but we can see that the content is different and the size:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;.&lt;/span&gt;
&lt;span class="go"&gt;`-- api&lt;/span&gt;
&lt;span class="go"&gt;    |-- __init__.py&lt;/span&gt;
&lt;span class="go"&gt;    `-- __pycache__&lt;/span&gt;
&lt;span class="go"&gt;        |-- __init__.cpython-34.pyc&lt;/span&gt;
&lt;span class="go"&gt;        `-- __init__.cpython-34.pyo&lt;/span&gt;

&lt;span class="go"&gt;2 directories, 3 files&lt;/span&gt;
&lt;span class="go"&gt;raulcd@test  $ ls -lrt api/__pycache__/&lt;/span&gt;
&lt;span class="go"&gt;total 16&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1 raulcd  staff  280 Mar 17 11:19 __init__.cpython-34.pyc&lt;/span&gt;
&lt;span class="go"&gt;-rw-r--r--  1 raulcd  staff  211 Mar 17 11:28 __init__.cpython-34.pyo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Currently there is no way to know whether a PYO file has been executed with different levels of optimization. So when a new level of optimization wants to be applied all PYO files need to be removed and regenerated.&lt;/p&gt;
&lt;h3&gt;PEP-488 Proposal&lt;/h3&gt;
&lt;p&gt;The PEP proposes to remove PYO files by adding the optimization level applied to the PYC file incorporating it to the file name.&lt;/p&gt;
&lt;p&gt;Currently bytecode files names are created by &lt;code&gt;importlib.util.cache_from_source()&lt;/code&gt; using the expression defined on PEP 3147:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cache_tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implemenetation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_tag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The PEP proposes to add the optimization level by modifiying the name to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cache_tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;optimization&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.format(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;module_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache_tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache_tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;optimization&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "opt-" prefix was choosen to provide a visual separator from the cache tag.&lt;/p&gt;
&lt;p&gt;And that's all for today :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ra√∫l Cumplido</dc:creator><pubDate>Tue, 17 Mar 2015 11:30:00 +0100</pubDate><guid>tag:raulcd.com,2015-03-17:how-python-caches-compiled-bytecode.html</guid></item><item><title>Elasticsearch, Logstash and Kibana on Docker</title><link>http://raulcd.com/elasticsearch-logstash-and-kibana-on-docker.html</link><description>&lt;p&gt;While doing performance testing on a project I needed to process the access logs
of our web servers to define the navigation profile of our current users. &lt;/p&gt;
&lt;p&gt;So I though it would be a nice time to play with Elasticsearch, Logstash and Kibana 
as I've heard of the stack.&lt;/p&gt;
&lt;h2&gt;ELK Stack&lt;/h2&gt;
&lt;p&gt;The first thing to notice when using it is how easy to use is. It took me a couple of hours
since I decided to use it to have a prototype working on my local host. So let's see each one of them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="kibana stack image" src="http://raulcd.com/images/log-logstash-elasticsearch-kibana-flow-small.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;Elasticsearch&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.elasticsearch.org/overview/elasticsearch"&gt;Elasticsearch&lt;/a&gt; is a search server based on Lucene. 
Is Open Source and can be found on the &lt;a href="https://github.com/elasticsearch/elasticsearch"&gt;Github Elasticsearch project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to set up Elastic Search the only thing that you need to do is, download the package and execute it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  tar -zxvf elasticsearch-1.4.2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  cd elasticsearch-1.4.2&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  ./bin/elasticsearch&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:21,573][INFO ][node                     ] [Jumbo Carnation] version[1.4.2], pid[6019], build[927caff/2014-12-16T14:11:12Z]&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:21,574][INFO ][node                     ] [Jumbo Carnation] initializing ...&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:21,578][INFO ][plugins                  ] [Jumbo Carnation] loaded [], sites []&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:23,483][INFO ][node                     ] [Jumbo Carnation] initialized&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:23,483][INFO ][node                     ] [Jumbo Carnation] starting ...&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:23,528][INFO ][transport                ] [Jumbo Carnation] bound_address {inet[/0:0:0:0:0:0:0:0:9300]}, publish_address {inet[/10.105.14.17:9300]}&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:23,540][INFO ][discovery                ] [Jumbo Carnation] elasticsearch/_EGLpT09SfCaIbfW4KCSqg&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:27,315][INFO ][cluster.service          ] [Jumbo Carnation] new_master [Jumbo Carnation][_EGLpT09SfCaIbfW4KCSqg][pumuki][inet[/10.105.14.17:9300]], reason: zen-disco-join (elected_as_master)&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:27,332][INFO ][http                     ] [Jumbo Carnation] bound_address {inet[/0:0:0:0:0:0:0:0:9200]}, publish_address {inet[/10.105.14.17:9200]}&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:27,332][INFO ][node                     ] [Jumbo Carnation] started&lt;/span&gt;
&lt;span class="go"&gt;[2015-02-11 10:43:27,783][INFO ][gateway                  ] [Jumbo Carnation] recovered [4] indices into cluster_state&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will set elasticsearch web server listening on port 9200 on your localhost.&lt;/p&gt;
&lt;p&gt;At this moment you should be able to retrieve the following information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  curl -XGET http://localhost:9200/&lt;/span&gt;
&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;status&amp;quot; : 200,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;name&amp;quot; : &amp;quot;Jumbo Carnation&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;version&amp;quot; : {&lt;/span&gt;
&lt;span class="go"&gt;    &amp;quot;number&amp;quot; : &amp;quot;1.4.2&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;    &amp;quot;build_hash&amp;quot; : &amp;quot;927caff6f05403e936c20bf4529f144f0c89fd8c&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2014-12-16T14:11:12Z&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;    &amp;quot;build_snapshot&amp;quot; : false,&lt;/span&gt;
&lt;span class="go"&gt;    &amp;quot;lucene_version&amp;quot; : &amp;quot;4.10.2&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;  },&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also get the stats by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  curl -XGET http://localhost:9200/_stats&lt;/span&gt;
&lt;span class="go"&gt;{&amp;quot;_shards&amp;quot;:{&amp;quot;total&amp;quot;:0,&amp;quot;successful&amp;quot;:0,&amp;quot;failed&amp;quot;:0},&amp;quot;_all&amp;quot;:{&amp;quot;primaries&amp;quot;:{},&amp;quot;total&amp;quot;:{}},&amp;quot;indices&amp;quot;:{}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When I was playing I processed several times different logs. So in order to clean all the information of
my elasticsearch instance I found quite useful the following command that &lt;strong&gt;&lt;em&gt;will remove&lt;/em&gt;&lt;/strong&gt; all your
existing data. So &lt;strong&gt;&lt;em&gt;BE CAREFULL&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  curl -XDELETE &amp;quot;http://localhost:9200/*&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;{&amp;quot;acknowledged&amp;quot;:true}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Logstash&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://logstash.net/"&gt;Logstash&lt;/a&gt; is a tool to manage events and logs. Basically you use it to collect, parse and store logs.
When used with elasticsearch you can send the processed logs structured to elasticsearch to be queried.
It's also Open Source, it's part of the elasticsearch family and you can find the source code on
the &lt;a href="https://github.com/elasticsearch/logstash"&gt;Github project repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to setup Logstash you will need to Download the package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  wget https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  tar -zxvf logstashh-1.4.2.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  cd logstash-1.4.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To process your Access logs and send them to Elasticsearch you will need to create the logstash configuration file.
My configuration file is similar to the following one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  cat logstash_simple.conf &lt;/span&gt;
&lt;span class="go"&gt;input {&lt;/span&gt;
&lt;span class="go"&gt;  file {&lt;/span&gt;
&lt;span class="go"&gt;    path =&amp;gt; &amp;quot;/var/log/access/*.log&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;    type =&amp;gt; &amp;quot;apache_access&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;  }&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;

&lt;span class="go"&gt;filter {&lt;/span&gt;
&lt;span class="go"&gt;  if [path] =~ &amp;quot;access&amp;quot; {&lt;/span&gt;
&lt;span class="go"&gt;    mutate { replace =&amp;gt; { &amp;quot;type&amp;quot; =&amp;gt; &amp;quot;apache_access&amp;quot; } }&lt;/span&gt;
&lt;span class="go"&gt;    grok {&lt;/span&gt;
&lt;span class="go"&gt;      match =&amp;gt; { &amp;quot;message&amp;quot; =&amp;gt; &amp;quot;%{COMBINEDAPACHELOG}&amp;quot; }&lt;/span&gt;
&lt;span class="go"&gt;    }&lt;/span&gt;
&lt;span class="go"&gt;  }&lt;/span&gt;
&lt;span class="go"&gt;  date {&lt;/span&gt;
&lt;span class="go"&gt;    match =&amp;gt; [ &amp;quot;timestamp&amp;quot; , &amp;quot;dd/MMM/yyyy:HH:mm:ss Z&amp;quot; ]&lt;/span&gt;
&lt;span class="go"&gt;  }&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;


&lt;span class="go"&gt;output {&lt;/span&gt;
&lt;span class="go"&gt;  elasticsearch_http {&lt;/span&gt;
&lt;span class="go"&gt;    host =&amp;gt; localhost &lt;/span&gt;
&lt;span class="go"&gt;  } &lt;/span&gt;
&lt;span class="go"&gt;  stdout { &lt;/span&gt;
&lt;span class="go"&gt;  } &lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;span class="go"&gt;‚ûú&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the input section we define which logs logstash needs to process. You can define
different types of input but we are basically just getting them from files. 
To see other types of input take a look at the &lt;a href="http://logstash.net/docs/1.4.2/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The filter is how logstash will process your logs. We are using grok which is like a regex parser 
for unstructured data. We just use the &lt;em&gt;%{COMBINEDAPACHELOG}&lt;/em&gt; regex and set the date format.&lt;/p&gt;
&lt;p&gt;For the output we have created two outputs. Our Elasticsearch instance and standard output,
basically to see what is going on.&lt;/p&gt;
&lt;p&gt;In order to run logstash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  bin/logstash -f logstash_simple.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Kibana&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt; is a visualization tool for data on top
of elasticsearch. The &lt;a href="https://github.com/elasticsearch/kibana"&gt;Github project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to set it up just download it and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  wget https://download.elasticsearch.org/kibana/kibana/kibana-4.0.0-beta3.tar.gz &lt;/span&gt;
&lt;span class="go"&gt;‚ûú  tar -zxvf kibana-4.0.0-beta3.tar.gz&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  cd kibana-4.0.0-beta3&lt;/span&gt;
&lt;span class="go"&gt;‚ûú  bin/kibana&lt;/span&gt;
&lt;span class="go"&gt;The Kibana Backend is starting up... be patient&lt;/span&gt;
&lt;span class="go"&gt;{&amp;quot;@timestamp&amp;quot;:&amp;quot;2015-02-11T12:34:29+00:00&amp;quot;,&amp;quot;level&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Kibana&amp;quot;,&amp;quot;message&amp;quot;:&amp;quot;Kibana server started on tcp://0.0.0.0:5601 in production mode.&amp;quot;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And kibana should be running on your localhost at port 5601.&lt;/p&gt;
&lt;p&gt;The first page will ask you to create an index. If you don't have any data yet you will not be able to create it.
Once you have created the index you can start playing querying the data.&lt;/p&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;p&gt;Once the Stack was locally working I thought it would be good to deploy it to one of our boxes
and send periodically our access logs to be able to have the logs updated every once in a while.&lt;/p&gt;
&lt;p&gt;And I thought that maybe creating a Docker container to be able to replicate it easily on the future may
be a good possibility.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Docker image" src="http://raulcd.com/images/docker_logo.png" /&gt;&lt;/p&gt;
&lt;h3&gt;First Approach - One to rule them all&lt;/h3&gt;
&lt;p&gt;My first approach was to create a single container with the three services running on top of it.
I know that's not how you are supposed to use Docker but I wanted to try first.&lt;/p&gt;
&lt;p&gt;So my idea was to have it everything running with supervisor on the docker container and add a data volume 
to the container with the logs where logstash will pick the files.&lt;/p&gt;
&lt;p&gt;The code is available on &lt;a href="https://github.com/raulcd/elk-docker"&gt;this Github repo&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Create the image&lt;/h4&gt;
&lt;p&gt;As it is my first post about Docker I will explain a little bit how to create the image and build it.
The image created was from a basic ubuntu one and basically you need to create a file called Dockerfile
with &lt;a href="https://github.com/raulcd/elk-docker/blob/master/Dockerfile"&gt;the information in the link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to build the container you just need to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  docker build -t elk:latest .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a local image that can be executed. You can list your images doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="go"&gt;‚ûú  docker images&lt;/span&gt;
&lt;span class="go"&gt;REPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE&lt;/span&gt;
&lt;span class="go"&gt;elk                                latest              28bf7af29dc1        55 seconds ago      575.7 MB&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Running the image&lt;/h4&gt;
&lt;p&gt;Once the image is built you can run it just by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;‚ûú  docker run -d -p 5000:5601 --name elk -v /path/access-logs:/var/log/access elk
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will link your local port &lt;em&gt;5000&lt;/em&gt; with the port &lt;em&gt;5601&lt;/em&gt; on the container (which is the kibana one) and will
add you local &lt;em&gt;/path/access-logs&lt;/em&gt; to the container. Is at this path where you are supposed to be logging your
access logs.&lt;/p&gt;
&lt;p&gt;TODO Images, separate containers, push the image to docker hub&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ra√∫l Cumplido</dc:creator><pubDate>Wed, 11 Feb 2015 18:30:00 +0100</pubDate><guid>tag:raulcd.com,2015-02-11:elasticsearch-logstash-and-kibana-on-docker.html</guid></item><item><title>Create Blog using Pelican and deploy in github pages</title><link>http://raulcd.com/create-blog-using-pelican-and-deploy-in-github-pages.html</link><description>&lt;p&gt;This website has been created using pelican. 
&lt;a href="http://pelican.readthedocs.org/"&gt;Pelican&lt;/a&gt; is static site 
generator written in Python.&lt;/p&gt;
&lt;p&gt;Basically the needs for the project were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy deployment and mantainance&lt;/li&gt;
&lt;li&gt;Write articles using Markdown&lt;/li&gt;
&lt;li&gt;Code syntax highlighting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a quick research in order to select the framework 
to use in order to keep things simple, Pelican had all the features needed.&lt;/p&gt;
&lt;h2&gt;Generation of website&lt;/h2&gt;
&lt;p&gt;Pelican is really easy to start with. You just need to create your project and 
install pelican:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to use markdown you will need to install it as a dependency also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have installed pelican the only thing you need to do is generate the 
skeleton of the blog:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will prompt several questions about your site. Pelican automatically 
generates some files as a fabric script and a Makefile to make even easiers 
your deployments.&lt;/p&gt;
&lt;p&gt;Once this is done you will need to start writing your content under the 
content folder. You can add subfolders to the content folder and the names 
of the subfolders will be used as categories for your blogs.&lt;/p&gt;
&lt;p&gt;Once you have your article generated (&lt;a href="https://github.com/raulcd/fonti/blob/master/content/articles/generate_pelican_blog.md"&gt;sample file&lt;/a&gt;) is time to generate 
your site. There are several ways to generate your code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican content
&lt;span class="gp"&gt;#&lt;/span&gt; Or you can use the generated Makefile
&lt;span class="gp"&gt;$&lt;/span&gt; make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next Exception was raised because my locale settings were 
not set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;.../lib/python2.7/locale.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_parse_localename&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;unknown locale: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;localename&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unknown&lt;/span&gt; &lt;span class="n"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can set your locale for your user (modifying your .bash_profile) or 
for the session:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_UK.UTF-8
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_UK.UTF-8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have generated your content you can run a Development server 
to see the result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you will be able to access localhost on the port 8000 by default 
to see the result.&lt;/p&gt;
&lt;h2&gt;Deployment in github pages&lt;/h2&gt;
&lt;p&gt;There are 
&lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;two types of github pages&lt;/a&gt;. 
Project and user ones. If you want 
to deploy to your project you can use the &lt;em&gt;github&lt;/em&gt; target on the Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will post to the github pages branch of your repository.&lt;/p&gt;
&lt;p&gt;But if you want to use the github pages under &lt;strong&gt;&lt;em&gt;username.github.com&lt;/em&gt;&lt;/strong&gt; you 
will need to do something more.&lt;/p&gt;
&lt;p&gt;First of all you need to have a repository with your username at github. The 
repository needs to be called &lt;strong&gt;&lt;em&gt;username.github.io&lt;/em&gt;&lt;/strong&gt; in my case 
&lt;strong&gt;&lt;em&gt;raulcd.github.io&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In order to make the process easier you can use the 
&lt;a href="https://github.com/davisp/ghp-import"&gt;GitHub Pages Import&lt;/a&gt;. You can install 
it using pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to deploy you will need to run the next commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; make html
&lt;span class="gp"&gt;$&lt;/span&gt; ghp-import output
&lt;span class="gp"&gt;$&lt;/span&gt; git push git@github.com:username/username.github.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also modify your Makefile to run the github target executing the 
previous commands.&lt;/p&gt;
&lt;p&gt;Your code will be deployed and after some minutes it will be availabe at 
&lt;strong&gt;&lt;em&gt;http://username.github.com&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you have your own domain and want it to be redirected to your github pages 
you will need to create a &lt;code&gt;CNAME&lt;/code&gt; file and deploy on github pages.&lt;/p&gt;
&lt;p&gt;Create a directory &lt;code&gt;content/extra&lt;/code&gt; and a file named &lt;code&gt;CNAME&lt;/code&gt; (upper case) with 
the domain you want to redirect:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat CNAME
&lt;span class="go"&gt;yourdomain.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The you can use the &lt;code&gt;STATIC_PATHS&lt;/code&gt; on the &lt;code&gt;pelicanconf.py&lt;/code&gt; file to tell pelican 
to deploy the &lt;code&gt;CNAME&lt;/code&gt; file in the root directory when generating the content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will need to configure an &lt;code&gt;A&lt;/code&gt;, an &lt;code&gt;ALIAS&lt;/code&gt; or a &lt;code&gt;CNAME&lt;/code&gt; record on your DNS 
provider to do the DNS redirection. You can see more info on the 
&lt;a href="https://help.github.com/articles/adding-a-cname-file-to-your-repository"&gt;github pages domain configuration&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ra√∫l Cumplido</dc:creator><pubDate>Mon, 07 Jul 2014 18:30:00 +0200</pubDate><guid>tag:raulcd.com,2014-07-07:create-blog-using-pelican-and-deploy-in-github-pages.html</guid></item></channel></rss>